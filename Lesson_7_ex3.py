# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам
# и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого)
# деление клеток, соответственно.

# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.

# Умножение. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

# Деление. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида \n\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: \n\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: \n\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

# объявим класс Cell
class Cell:

    # определим конструктор класса
    def __init__(self, org_cells):

        self.num_of_orgs = org_cells # количество ячеек (органелл) в клетке

    # перегрузка оператора __str__()
    def __str__(self):
        return f"количество ячеек в клетке - {self.num_of_orgs}"

    # перегрузка оператора __add__()
    def __add__(self, other):
        return Cell(self.num_of_orgs + other.num_of_orgs)

    # перегрузка оператора __mul__()
    def __mul__(self, other):
        return Cell(self.num_of_orgs * other.num_of_orgs)

    # перегрузка оператора __sub__()
    def __sub__(self, other):
        if self.num_of_orgs > other.num_of_orgs:               # если в вычитаемой клетке ячеек больше, чем у вычитателя
            return Cell(self.num_of_orgs - other.num_of_orgs)  # возвращаем новую клетку
        else:
            print("Операция невозможна!")                      # в противном случае, показываем сообщение и возвращаем None
            return None

    # перегрузка оператора __truediv__()
    def __truediv__(self, other):
        return Cell(self.num_of_orgs // other.num_of_orgs)

    # статичный метод make_order
    @staticmethod
    def make_order(cell, sells_in_row):                 # принимает в качестве аргументов объект Cell
        num_of_rows = cell.num_of_orgs // sells_in_row  # и количество ячеек в строке
        remains = cell.num_of_orgs % sells_in_row
        for i in range(num_of_rows):                    # и возвращает строку
            print("*" * sells_in_row)
        print("*" * remains)


c = Cell(170)
c2 = Cell(12)
c3 = Cell(5)
print(f"Сложение: {c + c2 + c3}")
print(f"Вычитание: {c - c2}")
print(f"Вычитание: {c2 - c}")
print(f"Умножение: {c * c2}")
print(f"Деление: {c / c2}")
print(f"Метод make_order:")
Cell.make_order(c + c2 + c3, 23)
